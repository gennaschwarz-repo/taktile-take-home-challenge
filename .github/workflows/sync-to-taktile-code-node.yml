# This is a workflow to Sync Code to Taktile Code Node

name: Sync Code to Taktile Code Node

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  sync-code:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Identify Current Python Code
        id: python
        run: |
          
          echo "Identify Current Python Code"
          
          SUMMARIZE_CODE=$(jq -Rs . < Summarize.py)
          
          MULTIPLY_CODE=$(jq -Rs . < Multiply.py)
          
          echo "Current Summarize Code: "
          echo "$SUMMARIZE_CODE"
          echo "summarize_code=$SUMMARIZE_CODE" >> $GITHUB_OUTPUT
          
          echo "Current Multiply Code: "
          echo "$MULTIPLY_CODE"
          echo "multiply_code=$MULTIPLY_CODE" >> $GITHUB_OUTPUT

      - name: Identify Decision Flows
        id: flows
        run: |

          echo "Identify Decision Flow IDs"
          RESPONSE_FLOWS=$(curl -X 'POST' \
            'https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/list-decision-graphs/sandbox/decide' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H 'X-Api-Key: ${{ secrets.TAKTILE_API_KEY }}' \
            -d '{
            "data": {
              "organization_name": "NB36"
            },
            "metadata": {
            "version": "v1.0",
            "entity_id": "string"
            },
            "control": {
              "execution_mode": "sync"
            }
          }')
          
          echo "response_flows=$RESPONSE_FLOWS" >> $GITHUB_OUTPUT

          FLOWS=$(echo "$RESPONSE_FLOWS" | jq -r '.data.flows[].flow_id')
          echo "Decision Flow IDs: "
          echo "$FLOWS"
          echo "flow_ids=$FLOWS" >> $GITHUB_OUTPUT

      - name: Retrieve Decision Graph and Update Code Nodes
        id: graph
        run: |

          echo "Retrieve Decision Graphs"
          for FLOW_ID in ${{ steps.flows.outputs.flow_ids }}; do
            echo "Retrieve Decision Graph for Flow ID: $FLOW_ID"
           
            JSON_BODY_DECISION=$(cat <<EOF
          {
            "data": {
              "flow_id": "$FLOW_ID"
            },
            "metadata": {
              "version": "v1.0",
              "entity_id": "string"
            },
            "control": {
              "execution_mode": "sync"
            }
          }
          EOF
          )  
            
            RESPONSE_NODES=$(curl -X 'POST' \
              'https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/get-decision-graph/sandbox/decide' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -H 'X-Api-Key: ${{ secrets.TAKTILE_API_KEY }}' \
              -d "$JSON_BODY_DECISION")
        
            # Additional DEBUG lines if needed
              # echo "DEBUG: Payload being sent:"
              # echo "$JSON_BODY_DECISION" | jq 
              # echo "Patch Decisions Graph Response: $RESPONSE_NODES"

            echo "Decision Graph successfully retrieved for Flow ID: $FLOW_ID."
            
          FLOWS=$(echo "$RESPONSE_FLOWS" | jq -r '.data.flows[].flow_id')
          echo "Decision Flow IDs: "
          echo "$FLOWS"
          
            GRAPH=$(echo "$RESPONSE_NODES" | jq -r '.data.graph')
            NODES=$(echo "$RESPONSE_NODES" | jq -r '.data.graph[].node_id')
            echo "Nodes in Graph for Flow ID: $FLOW_ID"
            echo "$NODES"
            echo "Start Update Code Node Process"
            
            echo "$GRAPH" | jq -c '.[]' | while read -r NODE; do
            
              NODE_NAME=$(echo "$NODE" | jq -r '.node_name')
              NODE_TYPE=$(echo "$NODE" | jq -r '.node_type')
              NODE_ID=$(echo "$NODE" | jq -r '.node_id')
              echo "Node name: $NODE_NAME"
              echo "Node type: $NODE_TYPE"
                
              JSON_BODY_SUMMARIZE=$(cat <<EOF
          {
            "data": {
              "flow_id": "$FLOW_ID",
              "node_id": "$NODE_ID",
              "src_code": ${{ steps.python.outputs.summarize_code }}
            },
            "metadata": {
              "version": "v1.0",
              "entity_id": "string"
            },
            "control": {
              "execution_mode": "sync"
            }
          }
          EOF
          )

              JSON_BODY_MULTIPLY=$(cat <<EOF
          {
            "data": {
              "flow_id": "$FLOW_ID",
              "node_id": "$NODE_ID",
              "src_code": ${{ steps.python.outputs.multiply_code }}
            },
            "metadata": {
              "version": "v1.0",
              "entity_id": "string"
            },
            "control": {
              "execution_mode": "sync"
            }
          }
          EOF
          )

              if [[ "$NODE_TYPE" == "code_node" && "$NODE_NAME" == "Summarize" ]]; then
                echo "Running Process to Patch Summarize Node: $NODE_ID"
                
                curl -X 'POST' \
                  'https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/patch-decision-graph/sandbox/decide' \
                  -H 'accept: application/json' \
                  -H 'Content-Type: application/json' \
                  -H 'X-Api-Key: ${{ secrets.TAKTILE_API_KEY }}' \
                  -d "$JSON_BODY_SUMMARIZE"
                  
              elif [[ "$NODE_TYPE" == "code_node" && "$NODE_NAME" == "Multiply" ]]; then
                echo "Running Process to Patch Multiply Node: $NODE_ID"
               
                curl -X 'POST' \
                  'https://eu-central-1.taktile-org.decide.taktile.com/run/api/v1/flows/patch-decision-graph/sandbox/decide' \
                  -H 'accept: application/json' \
                  -H 'Content-Type: application/json' \
                  -H 'X-Api-Key: ${{ secrets.TAKTILE_API_KEY }}' \
                  -d "$JSON_BODY_MULTIPLY"
                  
              else
                echo "Not Patching Node $NODE_ID. Reason: NOT A CODE NODE"
              fi
              
            done

            echo "Patch Process Complete for Flow: $FLOW_ID"

          done
          
            

